@startuml class

interface Observer {
    {method} react()
}

abstract class BookObserver implements Observer {
    
}

abstract class PageObserver implements Observer {

}

abstract class StageObserver implements Observer {
    
}

abstract class Observed {
    {method} addObs()
    {method} alertObs() 
}

class BookModel extends Observed {
    - title: String
    - author: String
    - startDate: Date
    - endDate: Date
}

class PageModel extends Observed {

}

class StageModel extends Observed {
    - activeScene: int
    {method} setActiveScene(int activeScene)
    {method} getActiveScene()
}

class BookController {

}

class PageController {

}

class StageController {
    {method} switchToScene(i: int)

}

class GlobalScene extends BookObserver {
    {method} getScene()

}

class PageScene extends PageObserver {
    {method} getScene()
    {method} loadPage(i: int)
}

class FirstPage extends BookObserver {
    
}

class StageView extends StageObserver {
    - mainStage: Stage
}

class StickerView extends PageObserver {

}

StageController -- StageModel
StageController -- PageScene
StageController -- GlobalScene
BookController -- BookModel
BookController -- BookObserver
PageModel -- PageController

StageObserver -- StageModel
PageObserver -- PageModel
BookObserver -- BookModel
GlobalScene -- StickerView
StageView -- BookModel

StageView -- GlobalScene
StageView -- PageScene

BookModel --- PageModel

Observed -- Observer

@enduml